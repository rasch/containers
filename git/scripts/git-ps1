#!/bin/sh

# ----------------------------------------------------------------------------
#
#                               GIT PROMPT/PS1
#
#  This POSIX shell script was written to support `busybox ash` and `bash`.
#  Place it somewhere in the `PATH` and make it executable. Edit the `PS1`
#  variable in `~/.bashrc` (or the file specified by `ENV` if using ash) to
#  enable it.
#
#  ```
#  # ~/.bashrc
#  PS1="...\$(git ps1)..."
#  ```
#
#                                  FEATURES
#
#  ([gitdir]<branch>  <shasum>[|status]...[fstatus][upstream])
#
#  - gitdir:   only displays when the current working directory is the .git
#              directory. 'GIT_DIR! ' or 'BARE:'
#
#  - branch:   the current checked out branch or 'HEAD' when detached.
#
#  - shasum:   the short sha sum of the current checkout.
#
#  - status:   the current status(es) of the repository. The REBASE and AM
#              actions also display the number of steps as ' current/total'.
#              SHALLOW   SPARSE   REBASE   AM   AM/REBASE   MERGING
#              CHERRY-PICKING   REVERTING   BISECTING   CONFLICT
#
#  - fstatus:  the current status(es) of the file(s) in repository.
#              modified *   staged +   stashed $   untracked ?
#
#  - upstream: the difference between HEAD and upstream.
#              behind <   ahead >   diverged <>
#
#                                  EXAMPLES
#
#  (main  9bcc00e)
#  (main  9bcc00e*?>)
#  (main  9bcc00e|MERGING|CONFLICT*+)
#  (GIT_DIR! main  9bcc00e|MERGING|CONFLICT)
#  (BARE:main  de08ff3)
#  (new  9bcc00e|REBASE 1/3)
# ----------------------------------------------------------------------------

info=$(git rev-parse \
  --git-dir \
  --is-inside-git-dir \
  --is-inside-work-tree \
  --is-bare-repository \
  --is-shallow-repository \
  --short \
  HEAD 2>/dev/null)

# return early if not in a git repository
test -z "$info" && return

# split $info into separate variables
# shellcheck disable=SC2086
set -- $info

g=$1
is_inside_git_dir=$2
is_inside_work_tree=$3
is_bare_repository=$4
is_shallow_repository=$5
short_sha=$6

# don't show git prompt inside ignored directories
test "$is_inside_work_tree" = true && git check-ignore -q . && return

# symbols
modified='(*)'
staged='(+)'
stashed='($)'
untracked='(?)'
ahead='(>)'
behind='(<)'
open=' ('
separator='|'
branch_separator='  '
close=')'

# colors
modified_color='\033[35m'
staged_color='\033[32m'
stashed_color='\033[34m'
untracked_color='\033[34m'
ahead_color='\033[31m'
behind_color='\033[31m'
separator_color='\033[90m'
branch_color='\033[33m'
hash_color='\033[33m'
warn_color='\033[31m'
info_color='\033[36m'

# helper function to append an ansi color escape ($2) & text ($1) to $prompt
p () {
  prompt="$prompt\001${2:-\033[0m}\002${1}\001\033[0m\002"
}

# helper function to put the first line of a file ($1) into a variable ($2)
v() {
  test -r "$1" && IFS= read -r "$2" <"$1"
}

# initialize the git prompt
p "$open" "$separator_color"

if test "$is_inside_git_dir" = true; then
  if test "$is_bare_repository" = true; then
    p 'BARE:' "$warn_color"
  else
    p 'GIT_DIR! ' "$warn_color"
  fi
fi

branch=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD 2>/dev/null)

# get branch name if rebase in progress
v "$g/rebase-merge/head-name" branch
v "$g/rebase-apply/head-name" branch

p "${branch##refs/heads/}" "$branch_color"
p "$branch_separator" "$separator_color"
p "$short_sha" "$hash_color"

if test "$is_shallow_repository" = true; then
  p "$separator" "$separator_color"
  p 'SHALLOW' "$info_color"
fi

if test "$(git config --bool core.sparseCheckout)" = true; then
  p "$separator" "$separator_color"
  p 'SPARSE' "$info_color"
fi

if test -d "$g/rebase-merge"; then
  v "$g/rebase-merge/msgnum" current
  v "$g/rebase-merge/end" total
  p "$separator" "$separator_color"
  p 'REBASE' "$info_color"
elif test -d "$g/rebase-apply"; then
  v "$g/rebase-apply/next" current
  v "$g/rebase-apply/last" total
  if test -f "$g/rebase-apply/rebasing"; then
    p "$separator" "$separator_color"
    p 'REBASE' "$info_color"
  elif test -f "$g/rebase-apply/applying"; then
    p "$separator" "$separator_color"
    p 'AM' "$info_color"
  else
    p "$separator" "$separator_color"
    p 'AM/REBASE' "$info_color"
  fi
elif test -f "$g/MERGE_HEAD"; then
  p "$separator" "$separator_color"
  p 'MERGING' "$info_color"
elif test -f "$g/CHERRY_PICK_HEAD"; then
  p "$separator" "$separator_color"
  p 'CHERRY-PICKING' "$info_color"
elif test -f "$g/REVERT_HEAD"; then
  p "$separator" "$separator_color"
  p 'REVERTING' "$info_color"
elif v "$g/sequencer/todo" todo; then
  # shellcheck disable=SC2154
  case $todo in
    p[[:blank:]]*|pick[[:blank:]]*)
      p "$separator" "$separator_color"
      p 'CHERRY-PICKING' "$info_color"
      ;;
    revert[[:blank:]]*)
      p "$separator" "$separator_color"
      p 'REVERTING' "$info_color"
      ;;
  esac
elif test -f "$g/BISECT_LOG"; then
  p "$separator" "$separator_color"
  p 'BISECTING' "$info_color"
fi

# shellcheck disable=SC2154
if test -n "$current" -a -n "$total"; then
  p " $current/$total" "$separator_color"
fi

if test -n "$(git ls-files --unmerged 2>/dev/null)"; then
  p "$separator" "$separator_color"
  p 'CONFLICT' "$info_color"
fi

if test "$is_inside_work_tree" = true; then
  git diff --no-ext-diff --quiet || p "$modified" "$modified_color"

  git diff --no-ext-diff --quiet --cached || p "$staged" "$staged_color"

  git rev-parse --quiet --verify refs/stash >/dev/null && \
    p "$stashed" "$stashed_color"

  git ls-files --others --exclude-standard --error-unmatch -- ':/*' >/dev/null 2>&1 && \
    p "$untracked" "$untracked_color"
fi

count=$(git rev-list --count --left-right @\{upstream\}...HEAD 2>/dev/null)

if test -n "$count"; then
  # shellcheck disable=SC2086
  set -- $count
  test "$1" -ne 0 && p "$behind" "$behind_color"
  test "$2" -ne 0 && p "$ahead" "$ahead_color"
fi

# close the git prompt
p "$close" "$separator_color"

# the git ps1
printf '%b' "$prompt"
